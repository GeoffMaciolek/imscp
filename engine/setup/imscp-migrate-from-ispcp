#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2015 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Debug;
use iMSCP::Config;
use iMSCP::Bootstrapper;
use iMSCP::Dialog;
use iMSCP::Stepper;
use iMSCP::Database;
use MIME::Base64;
use Crypt::CBC;
use iMSCP::Crypt qw/encryptRijndaelCBC/;
use iMSCP::File;
use iMSCP::Dir;
use iMSCP::SystemUser;
use iMSCP::SystemGroup;
use iMSCP::Execute;
use iMSCP::TemplateParser;
use iMSCP::ProgramFinder;
use iMSCP::Service;
use File::Basename;
use Data::Dumper;
use version;

sub _ispCPdecryptPassword
{
	my $password = shift;

	Crypt::CBC->new(
		-cipher => 'Crypt::Blowfish',
		-key => $main::ispcpDBKey,
		-keysize => length $main::ispcpDBKey,
		-literal_key => 1,
		-iv => $main::ispcpDBiv,
		-header => 'none',
		-padding => 'space' # ispCP compliant padding
	)->decrypt(decode_base64($password));
}

# Re-encrypt the given password with i-MSCP database key
sub _reencryptPassword($$$$$)
{
	my ($tableName, $idFieldName, $pwdFieldName, $row, $errors) = @_;

	my $password = encryptRijndaelCBC(
		$main::imscpConfig{'DB_KEY'}, $main::imscpConfig{'DB_IV'}, _ispCPdecryptPassword($row->{$pwdFieldName})
	);

	my $rs = iMSCP::Database->factory()->doQuery(
		'u', "UPDATE $tableName SET $pwdFieldName = ? WHERE $idFieldName = ?", $password, $row->{$idFieldName}
	);
	push @{$errors}, $result unless ref $rs eq 'HASH';

	undef;
}

# Connect to the ispCP database
sub _ispCPdbConnect
{
	my $db = iMSCP::Database->factory();
	$db->set('DATABASE_NAME', $main::ispcpConfig{'DATABASE_NAME'});
	$db->set('DATABASE_HOST', $main::ispcpConfig{'DATABASE_HOST'});
	$db->set('DATABASE_USER', $main::ispcpConfig{'DATABASE_USER'});
	$db->set('DATABASE_PASSWORD', _ispCPdecryptPassword($main::ispcpConfig{'DATABASE_PASSWORD'}));
	$db->connect();
}

# Remove any ispCP file (including daemons)
sub removeIspcpFiles
{
	my @errors = ();

	# Disabling ispCP fcgid and fastcgi modules
	if(my $prog = iMSCP::ProgramFinder::find('a2dismod')) {
		my $rs = execute("$prog fastcgi_ispcp fcgid_ispcp", \my $stdout, \my $stderr);
		push @errors, $stderr if $rs && $stderr;
		push @errors, sprintf('Could not disable ispCP fcgid and fastcgi modules') if $rs && ! $stderr;
	}

	# Deleting ispCP Apache module files
	for my $file (qw/fastcgi_ispcp.conf fastcgi_ispcp.load fcgid_ispcp.conf fcgid_ispcp.load/) {
		if(-f "$main::ispcpConfig{'HTTPD_MODS_AVAILABLE_DIR'}/$file") {
			unlink "$main::ispcpConfig{'HTTPD_MODS_AVAILABLE_DIR'}/$file" or push
				@errors, sprintf('Could not delete %s: %s', "$main::ispcpConfig{'HTTPD_MODS_AVAILABLE_DIR'}/$file", $!);
		}
	}

	# Disabling ispcp.conf Apache configuration file
	if(-f "$main::ispcpConfig{'HTTPD_SITES_AVAILABLE_DIR'}/ispcp.conf") {
		if(my $prog = iMSCP::ProgramFinder::find('2dissite')) {
			my $rs = execute("$prog ispcp.conf", \my $stdout, \my $stderr);
			push @errors, $stderr if $stderr && $rs;
			push @errors, sprintf('Could not disable ispcp Apache vhost file') if $rs && ! $stderr;
		}

		# Deleting ispcp.conf Apache configuration file
		unlink "$main::ispcpConfig{'HTTPD_SITES_AVAILABLE_DIR'}/ispcp.conf" or push
			@errors, sprintf('Could not delete %s: %s', "$main::ispcpConfig{'HTTPD_SITES_AVAILABLE_DIR'}/ispcp.conf", $!);
	}

	# Removing ispCP services
	my $serviceMngr = iMSCP::Service->getInstance();

	for my $service('ispcp_daemon', 'ispcp_network') {
		if($serviceMngr->hasService($service)) {
			local $@;
			eval { $serviceMngr->remove(); };
			push @errors, sprintf('Could not remove %s service init script: %s', $service, $@) if $@;
		}
	}

	# Removing ispCP directories
	for my $dir(
		$main::ispcpConfig{'CONF_DIR'}, # /etc/ispcp
		$main::ispcpConfig{'LOG_DIR'}, # /var/log/ispcp
		$main::ispcpConfig{'ROOT_DIR'}, # /var/www/ispcp
		$main::ispcpConfig{'HTTPD_CUSTOM_SITES_DIR'}, # /etc/apache2/ispcp
		$main::ispcpConfig{'MTA_VIRTUAL_CONF_DIR'} # /etc/postfix/ispcp
	) {
		local $@;
		eval { iMSCP::Dir->new( dirname => $dir )->remove(); };
		push @errors, $@ if $@;
	}

	# Removing ispCP files
	for my $file(
		( $^O =~ /bsd$/ ? '/usr/local/etc' : '/etc' ) . '/cron.d/ispcp', # /etc/cron.d/ispcp
		( $^O =~ /bsd$/ ? '/usr/local/etc' : '/etc' ) . '/logrotate.d/ispcp', # /etc/logrotate.d/ispcp
	) {
		if(-f $file) {
			unlink $file or push @errors, sprintf('Could not delete %s: %s', $file, $!);
		}
	}

	# Remmoving ispCP PHP starter directory
	local $@;
	eval { iMSCP::Dir->new( dirname => $main::ispcpConfig{'PHP_STARTER_DIR'} )->remove(); };
	push @errors, $@ if $@;

	if (@errors) {
		my $errors = join "\n", @errors;
		iMSCP::Dialog->getInstance()->msgbox(<<EOF);

\\Z1\\ZuErrors were detected\\Zn

The following errors occurred:

$errors

Those errors are not fatal. However, it's greatly recommended to fix them before running the i-MSCP setup script.
EOF

		warning("\n$errors");
	}

	0;
}

# Save ISP logo (Admin and reseller GUI logo)
sub saveIspLogo
{
	my @errors;
	my $rows = iMSCP::Database->factory()->doQuery(
		'logo', "SELECT DISTINCT logo FROM user_gui_props WHERE logo <> '0' AND logo <> ''"
	);

	unless (ref $rows eq 'HASH') {
		push @errors, $rows;
	} else {
		for my $logo(keys %{$rows}) {
			my $logoFilePath = "$main::ispcpConfig{'GUI_ROOT_DIR'}/themes/user_logos/$logo";
			if(-f $logoFilePath) {
				local $@;
				eval {
					iMSCP::File->new( filename  => $logoFilePath )->copyFile(
						"$main::imscpConfig{'GUI_ROOT_DIR'}/data/persistent/ispLogos/$logo"
					);
				};
				push @errors, $@ if $@;
			}
		}
	}

	if (@errors) {
		my $errors = join "\n", @errors;
		iMSCP::Dialog->getInstance()->msgbox(<<EOF);

\\Z1\\ZuOne or many errors occured while copying ISP logos\\Zn

The following errors occurred:

$errors

Those errors can be ignored. However, be aware that some ISP logos can be missing.
EOF

		warning("\n$errors");
	}

	0;
}

# Process some db updates
sub dbUpgrade
{
	my @errors;
	my $db = iMSCP::Database->factory();

	my $rs = $db->doQuery('u', "UPDATE `config` SET `value` = '45' WHERE `name` = 'DATABASE_REVISION' AND `value` > '45'");
	ref $rs eq 'HASH' or push @errors, $rs;

	$rs = $db->doQuery('mail_id', "SELECT `mail_id`, `mail_pass` FROM `mail_users` WHERE `mail_pass` != '_no_'");
	unless (ref $rs eq 'HASH'){
		push @errors, $rs;
	} elsif (%{$rs}) {
		_reencryptPassword('mail_users', 'mail_id', 'mail_pass', $_, \@errors) for values %{$rs};
	}

	$rs = $db->doQuery('sqlu_id', 'SELECT `sqlu_id`, `sqlu_pass` FROM `sql_user`');
	unless (ref $rs eq 'HASH') {
		push @errors, $result;
	} elsif (%{$rs}) {
		_reencryptPassword('sql_user', 'sqlu_id', 'sqlu_pass', $_, \@errors) for values %{$rs};
	}

	if (@errors) {
		my $errors = join "\n", @errors;
		iMSCP::Dialog->getInstance()->msgbox(<<EOF);

\\Z1\\ZuOne or many errors occurred while re-encrypting passwords\\Zn

The following errors occurred:

$errors

These errors are not fatal. However, be aware that some mail and/or SQL passwords might be corrupted.
EOF

		warning("\n$errors");
	}

	0;
}

# Save ispCP main configuration parameters
sub saveIspcpMainConfiguration
{
	$main::imscpConfig{'DATABASE_PASSWORD'} = iMSCP::Crypt::encryptRijndaelCBC(
		$main::imscpConfig{'DB_KEY'},
		$main::imscpConfig{'DB_IV'},
		iMSCP::Crypt::decryptBlowfish($main::ispcpDBKey, $main::ispcpDBiv, $main::ispcpConfig{'DATABASE_PASSWORD'}),

	);

	for my $param(
		qw/
			DEFAULT_ADMIN_ADDRESS SERVER_HOSTNAME BASE_SERVER_IP BASE_SERVER_VHOST DATABASE_TYPE DATABASE_HOST
			DATABASE_NAME DATABASE_USER ZIP
		/
	) {
		$main::imscpConfig{$param} = $main::ispcpConfig{$param};
	}

	$main::imscpConfig{'SYSTEM_USER_PREFIX'} = $main::ispcpConfig{'APACHE_SUEXEC_USER_PREF'};
	$main::imscpConfig{'SYSTEM_USER_MIN_UID'} = $main::ispcpConfig{'APACHE_SUEXEC_MIN_UID'};

	0;
}

# Save needed configuration files
sub saveIspcpConfigFiles
{
	my @errors;

	my $rs = iMSCP::Database->factory()->doQuery(
		'zone', "SELECT `domain_name` AS 'zone' FROM `domain` UNION SELECT `alias_name` AS 'zone' FROM `domain_aliasses`"
	);
	unless (ref $rs eq 'HASH') {
		push @errors, $rs;
	} elsif (%{$rs}){
		local $Data::Dumper::Terse = 1;

		for my $zone(keys %{$rs}) {
			my $zoneFilePath = "$main::ispcpConfig{'BIND_DB_DIR'}/$zone.db";

			if (-f $zoneFilePath) {
				local $@;
				eval {
					my $file = iMSCP::File->new( filename  => $zoneFilePath )->copyFile(
						"$main::imscpConfig{'CONF_DIR'}/bind/working/"
					);
				};
				push @errors, $@ if $@;
			}
		}
	}

	if (@errors) {
		my $errors = join "\n", @errors;

		iMSCP::Dialog->getInstance()->msgbox(<<EOF);

\\Z1\\ZuErrors while saving files\\Zn

Please fix the following errors and try again:

$errors
EOF

		error("\n$errors");
		return 1;
	}

	0;
}

# Delete all ispCP unix users and groups (They will be re-created by i-MSCP)
sub deleteIspCPunixUsers
{
	my @errors;
	my $userH = iMSCP::SystemUser->new( keepHome => 'yes' );
	my $groupH = iMSCP::SystemGroup->getInstance();

	# Master unix user/group

	my $userName = $main::ispcpConfig{'APACHE_SUEXEC_USER_PREF'} . $main::ispcpConfig{'APACHE_SUEXEC_MIN_UID'};
	my $rs = $userH->delSystemUser($userName);
	push @errors, sprintf('Could not delete %s unix user', $userName) if $rs;

	# Only needed to cover the case where the admin added other users to the unix group
	my $groupName = $main::ispcpConfig{'APACHE_SUEXEC_USER_PREF'} . $main::ispcpConfig{'APACHE_SUEXEC_MIN_GID'};
	$rs = $groupH->delSystemGroup($groupName);
	push @errors, sprintf('Could not delete %s unix group', $groupName) if $rs;

	# Customer unix users/groups

	my $result = iMSCP::Database->factory()->doQuery('domain_uid', 'SELECT `domain_uid`, `domain_gid` FROM `domain`');
	unless (ref $result eq 'HASH'){
		push @errors, $result;
	} elsif (%{$result}) {
		for(values %{$result}) {
			$userName = getpwuid($_->{'domain_uid'});
			if($userName) {
				$rs = $userH->delSystemUser($userName) if $userName;
				push @errors, sprintf('Could not delete %s unix user', $userName) if $rs;
			}

			# Only needed to cover the case where the admin added other users to the unix group
			$groupName = getgrgid($_->{'domain_gid'});
			if($groupName) {
				$rs = $groupH->delSystemGroup($groupName);
				push @errors, sprintf('Could not delete %s unix group', $groupName) if $rs;
			}
		}
	}

	if (@errors) {
		my $errors = join "\n", @errors;

		iMSCP::Dialog->getInstance()->msgbox(<<EOF);

\\Z1\\ZuCould not delete one or many ispCP unix user/group\\Zn

Please fix the following errors and try again:

$errors
EOF

		error("\n$errors");
		return 1;
	}

	0;
}

# Check ispCP database integrity
sub databaseIntegrityTests
{
	# Check broken dependencies
	my $query = '
		SELECT
			`t1`.*
		FROM
			`%s` AS `t1`
		LEFT JOIN
			`%s` AS `t2` ON `t1`.`%s` = `t2`.`%s`
		WHERE
			`t2`.`%s` IS NULL %s
	';

	my @tests = (
		{
			group => 'admin_id', childTable => 'admin', parentTable => 'admin', childField => 'created_by',
			parentField => 'admin_id', limit => "AND t1.`admin_type` = 'user'"
		},
		{
			group => 'admin_id', childTable => 'admin', parentTable => 'admin', childField => 'created_by',
			parentField => 'admin_id', limit => "AND t1.`admin_type` = 'reseller'"},
		{
			group => 'admin_id', childTable => 'admin', parentTable => 'domain', childField => 'admin_id',
			parentField => 'domain_admin_id', limit => "AND t1.`admin_type` = 'user'"},
		{
			group => 'domain_id', childTable => 'domain', parentTable => 'admin', childField => 'domain_admin_id',
			parentField => 'admin_id', limit => ''
		},
		{
			group => 'domain_id', childTable => 'domain', parentTable => 'server_ips', childField => 'domain_ip_id',
			parentField => 'ip_id', limit => ''
		},
		{
			group => 'alias_id', childTable => 'domain_aliasses', parentTable => 'domain', childField => 'domain_id',
			parentField => 'domain_id', limit => ''
		},
		{
			group => 'domain_dns_id', childTable => 'domain_dns', parentTable => 'domain', childField => 'domain_id',
			parentField => 'domain_id', limit => ''
		},
		{
			group => 'domain_dns_id', childTable => 'domain_dns', parentTable => 'domain_aliasses',
			childField => 'alias_id', parentField => 'alias_id', limit => "AND t1.`alias_id` != 0"
		},
		{
			group => 'userid', childTable => 'ftp_users', parentTable => 'domain', childField => 'uid',
			parentField => 'domain_uid', limit => ''
		},
		{
			group => 'userid', childTable => 'ftp_users', parentTable => 'domain', childField => 'gid',
			parentField => 'domain_gid', limit => ''
		},
		{
			group => 'id', childTable => 'htaccess', parentTable => 'domain', childField => 'dmn_id',
			parentField => 'domain_id', limit => ''
		},
		{
			group => 'id', childTable => 'htaccess', parentTable => 'htaccess_users', childField => 'user_id',
			parentField => 'id', limit => 'AND t1.`user_id` != 0'
		},
		{
			group => 'id', childTable => 'htaccess', parentTable => 'htaccess_groups', childField => 'group_id',
			parentField => 'id', limit => 'AND t1.`group_id` != 0'
		},
		{
			group => 'id', childTable => 'htaccess_groups', parentTable => 'domain', childField => 'dmn_id',
			parentField => 'domain_id', limit => ''
		},
		{
			group => 'id', childTable => 'htaccess_users', parentTable => 'domain', childField => 'dmn_id',
			parentField => 'domain_id', limit => ''
		},
		{
			group => 'mail_id', childTable => 'mail_users', parentTable => 'domain', childField => 'domain_id',
			parentField => 'domain_id', limit => ''
		},
		{
			group => 'mail_id', childTable => 'mail_users', parentTable => 'domain_aliasses', childField => 'sub_id',
			parentField => 'alias_id', limit => "AND t1.`mail_type` LIKE  'alias_%'"
		},
		{
			group => 'mail_id', childTable => 'mail_users', parentTable => 'subdomain', childField => 'sub_id',
			parentField => 'subdomain_id', limit => "AND t1.`mail_type` LIKE  'subdom_%'"
		},
		{
			group => 'mail_id', childTable => 'mail_users', parentTable => 'subdomain_alias', childField => 'sub_id',
			parentField => 'subdomain_alias_id', limit => "AND t1.`mail_type` LIKE  'alssub_%'"
		},
		{
			group => 'subdomain_id', childTable => 'subdomain', parentTable => 'domain', childField => 'domain_id',
			parentField => 'domain_id', limit => ''
		},
		{
			group => 'subdomain_alias_id', childTable => 'subdomain_alias', parentTable => 'domain_aliasses',
			childField => 'alias_id', parentField => 'alias_id', limit => ''
		},
		{
			group => 'groupname', childTable => 'ftp_group', parentTable => 'domain', childField => 'gid',
			parentField => 'domain_gid', limit => ''
		},
		{
			group => 'name', childTable => 'quotalimits', parentTable => 'domain', childField => 'name',
			parentField => 'domain_name', limit => ''
		},
		{
			group => 'name', childTable => 'quotatallies', parentTable => 'domain', childField => 'name',
			parentField => 'domain_name', limit => ''
		},
		{
			group => 'sqld_id', childTable => 'sql_database', parentTable => 'domain', childField => 'domain_id',
			parentField => 'domain_id', limit => ''
		},
		{
			group => 'sqlu_id', childTable => 'sql_user', parentTable => 'sql_database', childField => 'sqld_id',
			parentField => 'sqld_id', limit => ''
		}
	);

	my $db = iMSCP::Database->factory();

	my @errors = ();
	local $Data::Dumper::Terse = 1;

	for my $test (@tests) {
		my $pQuery =  sprintf(
			$query, $test->{'childTable'}, $test->{'parentTable'}, $test->{'childField'}, $test->{'parentField'},
			$test->{'parentField'}, $test->{'limit'}
		);

		my $result = $db->doQuery($test->{'group'}, $pQuery);

		unless (ref $result eq 'HASH') {
			push @errors, $result;
		} elsif (%{$result}) {
			for (values %{$result}) {
				push @errors, "Orphaned entry found in table $test->{'childTable'}: ". (Dumper $_);
			}
		}
	}

	# Check for entities status
	@tests = (
		{ group => 'domain_id',	table => 'domain', statusField => 'domain_status' },
		{ group => 'alias_id', table => 'domain_aliasses', statusField => 'alias_status' },
		{ group => 'id', table => 'htaccess', statusField => 'status' },
		{ group => 'id', table => 'htaccess_groups', statusField => 'status' },
		{ group => 'id', table => 'htaccess_users',	statusField => 'status' },
		{ group => 'mail_id', table => 'mail_users', statusField => 'status' },
		{ group => 'ip_id', table => 'server_ips', statusField => 'ip_status' },
		{ group => 'subdomain_id', table => 'subdomain', statusField => 'subdomain_status' },
		{ group => 'subdomain_alias_id', table => 'subdomain_alias', statusField => 'subdomain_alias_status' }
	);

	for my $test (@tests) {
		my $query =  sprintf("SELECT * FROM `%s` WHERE `%s` != 'ok'", $test->{'table'}, $test->{'statusField'});
		my $result = $db->doQuery($test->{group}, $query);

		unless (ref $result eq 'HASH') {
			push @errors, $result;
		} elsif (%{$result}) {
			for (values %{$result}) {
				push @errors, "Wrong status for the $test->{'table'} database table: " . (Dumper $_);
			}
		}
	}

	# Test for databases and SQL users
	my $result = $db->doQuery(
		'sqlu_id', 'SELECT * FROM `sql_user` AS `t1` LEFT JOIN `sql_database` AS `t2` ON `t1`.`sqld_id` = `t2`.`sqld_id`'
	);

	unless (ref $result eq 'HASH') {
		push @errors, $result;
	} else {
		if (%{$result}) {
			for (values %{$result}) {
				$db->set('DATABASE_USER', $_->{'sqlu_name'});
				$db->set('DATABASE_PASSWORD', _ispCPdecryptPassword($_->{'sqlu_pass'}));
				$db->set('DATABASE_NAME', '');

				my $dbConnect = $db->connect();

				if($dbConnect) { # Cannot connect to the SQL server with the given user
					push @errors, $dbConnect;
				} else {
					$db->set('DATABASE_NAME', $_->{'sqld_name'});
					$dbConnect = $db->connect();

					# Cannot connect to the given database using the given user
					push @errors, $dbConnect if $dbConnect;
				}
			}
		}
	}

	if (@errors) {
		my $errors = join "\n", @errors;
		iMSCP::Dialog->getInstance()->msgbox(<<EOF);

\\Z1\\ZuispCP database is corrupted\\Zn

Please fix the following errors and try again:

$errors
EOF

		error("\n$errors");
		return 1;
	}

	_ispCPdbConnect(); # Restore conection to the ispCP datavase

	0;
}

# Check ispCP database password using ispCP database key files
sub checkDbPassword
{
	my @keyFilePaths = (
		$main::ispcpConfig{'CONF_DIR'} . '/ispcp-keys.conf',
		$main::ispcpConfig{'ROOT_DIR'} . '/engine/ispcp-db-keys.pl',
		$main::ispcpConfig{'ROOT_DIR'} . '/engine/messenger/ispcp-db-keys.pl',
		$main::ispcpConfig{'GUI_ROOT_DIR'} . '/include/ispcp-db-keys.php'
	);

	my @existentKeyFiles;
	my @errors;

	for my $filepath(@keyFilePaths) {
		next unless -f $filepath;

		push @existentKeyFiles, $filepath;

		my $fileContent = iMSCP::File->new( filename => $filepath )->get();

		if($fileContent =~ /db_pass_key\s=\s'(.+)'/ || $fileContent =~ /DB_PASS_KEY=(.+)/i) {
			$main::ispcpDBKey = $1;

			if($fileContent =~ /db_pass_iv\s=\s'(.+)'/ || $fileContent =~ /DB_PASS_IV=(.+)/i) {
				$main::ispcpDBiv = $1;

				my $dbConnection = _ispCPdbConnect();
				if($dbConnection) {
					push @errors, 'Could not connect to SQL server ispCP data';
				} else {
					return 0;
				}
			}
		}
	}

	if(@existentKeyFiles) {
		my $keyFiles = join "\n", @existentKeyFiles;

		iMSCP::Dialog->getInstance()->msgbox(<<EOF);

\\Z1\\ZuispCP database key files seem corrupted\\Zn

The migration script was unable to connect to the ispCP database using the following key files:

$keyFiles

Please fix this issue and try again.
EOF
	} else {
		my $keyFiles = join "\n", @keyFilePaths;

		iMSCP::Dialog->getInstance()->msgbox(<<EOF);

\\Z1\\ZuUnable to find any ispCP database key file\\Zn

The migration script could not find an ispCP database key file. The following paths were checked:

$keyFiles

Please fix this issue and try again.
EOF
	}

	error("\n" . join "\n", @errors);

	1;
}

# Check ispCP version
sub checkIspcpVersion
{
	if($main::ispcpConfig{'Version'} =~ /([\d.]+)/) {
		if(version->parse($1) < version->parse('1.0.7')) {
			iMSCP::Dialog->getInstance()->set('defaultno', '');

			if(iMSCP::Dialog->getInstance()->yesno(<<EOF)) {

\\Z1\\ZuMigration from ispCP version $1 is not supported\\Zn

\\Z1WARNING:\\Zu

Only migration from ispCP 1.0.7 or newest is supported.

By pressing the 'continue' button you can ignore this warning. Be warned that if you continue, your data might be corrupted.
EOF
				return 1;
			}
		}
	} else {
		iMSCP::Dialog->getInstance()->msgbox(<<EOF);

\\Z1\\ZuUnable to retrieve i-MSCP version\\Zn

The migration script could not retrieve your ispCP version.

Please fix this issue and try again.
EOF
		return 1;
	}

	0;
}

# Show migration script welcome message
sub welcomeMessage
{
	my $dialog = iMSCP::Dialog->getInstance();
	$dialog->set('title', 'i-MSCP Migration Dialog');

	exit 0 if $dialog->yesno(<<EOF);

Welcome to the i-MSCP \\Z4($main::imscpConfig{'Version'})\\Z0 migration dialog.

This program will migrate your ispCP control panel to i-MSCP.

\\ZuPlease make sure you have a backup of your data before continue.\\Zn

\\Z4NOTE:\\Z0 During the migration process some or all services might require to be shutdown or restarted.

Do you want to continue?
EOF

	0;
}

# Process all migration steps
sub processMigration
{
	my $configDir = ($^O =~ /bsd$/ ? '/usr/local/etc' : '/etc');

	-f "$configDir/ispcp/ispcp.conf" or die(sprintf('Could not read %s', $configDir/ispcp/ispcp.conf));

	# Load ispCP configuration file
	tie %main::ispcpConfig, 'iMSCP::Config', fileName => "$configDir/ispcp/ispcp.conf";

	my @steps = (
		[ \&welcomeMessage,             'Welcome message' ],
		[ \&checkIspcpVersion,          'Checking for ispCP version' ],
		[ \&checkDbPassword,            'Checking for database password' ],
		[ \&databaseIntegrityTests,     'Checking for database integrity' ],
		[ \&deleteIspCPunixUsers,       'Deleting ispCP unix users' ],
		[ \&saveIspcpConfigFiles,       'Saving system configuration files' ],
		[ \&saveIspcpMainConfiguration, 'Saving main ispCP configuration parameters' ],
		[ \&dbUpgrade,                  'Database upgrade' ],
		[ \&saveIspLogo,                'Saving ISP logos' ],
		[ \&removeIspcpFiles,           'Removing ispCP files' ]
	);

	my ($nStep, $nSteps) = (0, scalar @steps);
	step(@{ $steps[$nStep] }, $nSteps, ++$nStep) for @steps;

	iMSCP::Dialog->getInstance()->msgbox(<<EOF);

\\Z1Migration successful\\Zn

Your ispCP control panel has been successfuly migrated to i-MSCP $main::imscpConfig{'Version'}.

You can now finish the i-MSCP installation by running the i-MSCP setup script.
EOF

	0;
}

newDebug('imscp-migrate-from-ispcp.log');
iMSCP::Bootstrapper->getInstance()->boot({ mode => 'setup', nodatabase => 1 });
exit processMigration();
