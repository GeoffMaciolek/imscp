#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2015 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../PerlLib";
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Execute;
use iMSCP::Getopt;
use iMSCP::Mail;
use File::Basename;

sub disableExpiredAccounts
{
	my $db = iMSCP::Database->factory();

	my $rdata = $db->doQuery('name', "SELECT name, value FROM config WHERE name = 'HARD_MAIL_SUSPENSION'");
	ref $rdata eq 'HASH' or die($rdata);

	my $hardMailSuspension = $rdata->{'HARD_MAIL_SUSPENSION'}->{'value'};

	$rdata = $db->doQuery(
		'domain_id',
		"
			SELECT
				domain_id, domain_admin_id
			FROM
				domain
			WHERE
				domain_expires <> '0'
			AND
				domain_expires <  UNIX_TIMESTAMP()
			AND
				domain_status <> 'disabled'
		"
	);
	ref $rdata eq 'HASH' or die($rdata);

	if(%{$rdata}) {
		my $rawDb = $db->getRawDb();

		for my $dmnId(keys %{$rdata}) {
			eval {
				$rawDb = $db->startTransaction();

				if($hardMailSuspension) {
					$rawDb->do('UPDATE mail_users SET status = ?, po_active = ? WHERE domain_id = ?', undef, 'todisable', 'no', $dmnId);
				} else {
					$rawDb->do('UPDATE mail_users SET mail_pass = ?, status = ? WHERE mail_id = ?', undef, 'no', $dmnId);
				}

				$rawDb->do('UPDATE domain SET domain_status = ? WHERE domain_id = ?', undef, 'todisable', $dmnId);
				$rawDb->do('UPDATE subdomain SET subdomain_status = ? WHERE domain_id = ?', undef, 'todisable', $dmnId);
				$rawDb->do('UPDATE domain_aliasses SET alias_status = ? WHERE domain_id = ?', undef, 'todisable', $dmnId);
				$rawDb->do(
					'
						UPDATE
							subdomain_alias
						SET
							subdomain_alias_status = ?
						WHERE
							alias_id IN (SELECT alias_id FROM domain_aliasses WHERE domain_id = ?)
					',
					undef, 'todisable', $dmnId
				);

				$rawDb->commit();
			};

			if($@) {
				$rawDb->rollback();
				$db->endTransaction();
				error(sprintf(
					'Could not schedule deactivation of customer with ID %s: %s', $rdata->{$dmnId}->{'domain_admin_id'},
					$@
				));
			}

			$db->endTransaction();
		}

		my $stderr;
		execute("perl $main::imscpConfig{'ENGINE_ROOT_DIR'}/imscp-rqst-mngr", undef, \$stderr) == 0 or die(
			$stderr || 'Unknown error'
		);
	}
}

newDebug('imscp-disable-accounts.log');

# Parse command line options
iMSCP::Getopt->parseNoDefault(sprintf("Usage: perl %s [OPTION]...", basename($0)) . qq {

Disable expired customer accounts.

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
 'verbose|v' => sub { setVerbose(@_); }
);

iMSCP::Bootstrapper->getInstance()->boot({ nolock = 1, norequirements => 1, config_readonly => 1 });
eval { disableExpiredAccounts() };
if($@) {
	my $error = $@;
	iMSCP::Mail->new()->errmsg($error);
	die($error);
};
